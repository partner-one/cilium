// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cilium/cilium/api/v1/models"
)

// GetIPCacheReader is a Reader for the GetIPCache structure.
type GetIPCacheReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIPCacheReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIPCacheOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetIPCacheBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIPCacheNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIPCacheOK creates a GetIPCacheOK with default headers values
func NewGetIPCacheOK() *GetIPCacheOK {
	return &GetIPCacheOK{}
}

/*GetIPCacheOK handles this case with default header values.

Success
*/
type GetIPCacheOK struct {
	Payload *models.IPCache
}

func (o *GetIPCacheOK) Error() string {
	return fmt.Sprintf("[GET /ip/cache/][%d] getIpCacheOK  %+v", 200, o.Payload)
}

func (o *GetIPCacheOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPCache)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIPCacheBadRequest creates a GetIPCacheBadRequest with default headers values
func NewGetIPCacheBadRequest() *GetIPCacheBadRequest {
	return &GetIPCacheBadRequest{}
}

/*GetIPCacheBadRequest handles this case with default header values.

Invalid request (error parsing parameters)
*/
type GetIPCacheBadRequest struct {
	Payload models.Error
}

func (o *GetIPCacheBadRequest) Error() string {
	return fmt.Sprintf("[GET /ip/cache/][%d] getIpCacheBadRequest  %+v", 400, o.Payload)
}

func (o *GetIPCacheBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIPCacheNotFound creates a GetIPCacheNotFound with default headers values
func NewGetIPCacheNotFound() *GetIPCacheNotFound {
	return &GetIPCacheNotFound{}
}

/*GetIPCacheNotFound handles this case with default header values.

No IP cache entries with provided parameters found
*/
type GetIPCacheNotFound struct {
}

func (o *GetIPCacheNotFound) Error() string {
	return fmt.Sprintf("[GET /ip/cache/][%d] getIpCacheNotFound ", 404)
}

func (o *GetIPCacheNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
