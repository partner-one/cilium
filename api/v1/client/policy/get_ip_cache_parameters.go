// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIPCacheParams creates a new GetIPCacheParams object
// with the default values initialized.
func NewGetIPCacheParams() *GetIPCacheParams {
	var ()
	return &GetIPCacheParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPCacheParamsWithTimeout creates a new GetIPCacheParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPCacheParamsWithTimeout(timeout time.Duration) *GetIPCacheParams {
	var ()
	return &GetIPCacheParams{

		timeout: timeout,
	}
}

// NewGetIPCacheParamsWithContext creates a new GetIPCacheParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPCacheParamsWithContext(ctx context.Context) *GetIPCacheParams {
	var ()
	return &GetIPCacheParams{

		Context: ctx,
	}
}

// NewGetIPCacheParamsWithHTTPClient creates a new GetIPCacheParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPCacheParamsWithHTTPClient(client *http.Client) *GetIPCacheParams {
	var ()
	return &GetIPCacheParams{
		HTTPClient: client,
	}
}

/*GetIPCacheParams contains all the parameters to send to the API endpoint
for the get IP cache operation typically these are written to a http.Request
*/
type GetIPCacheParams struct {

	/*Cidr
	  A CIDR range of IPs

	*/
	Cidr *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP cache params
func (o *GetIPCacheParams) WithTimeout(timeout time.Duration) *GetIPCacheParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP cache params
func (o *GetIPCacheParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP cache params
func (o *GetIPCacheParams) WithContext(ctx context.Context) *GetIPCacheParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP cache params
func (o *GetIPCacheParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP cache params
func (o *GetIPCacheParams) WithHTTPClient(client *http.Client) *GetIPCacheParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP cache params
func (o *GetIPCacheParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCidr adds the cidr to the get IP cache params
func (o *GetIPCacheParams) WithCidr(cidr *string) *GetIPCacheParams {
	o.SetCidr(cidr)
	return o
}

// SetCidr adds the cidr to the get IP cache params
func (o *GetIPCacheParams) SetCidr(cidr *string) {
	o.Cidr = cidr
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPCacheParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cidr != nil {

		// query param cidr
		var qrCidr string
		if o.Cidr != nil {
			qrCidr = *o.Cidr
		}
		qCidr := qrCidr
		if qCidr != "" {
			if err := r.SetQueryParam("cidr", qCidr); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
