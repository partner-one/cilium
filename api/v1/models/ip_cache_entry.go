// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPCacheEntry IP cache entry"
// swagger:model IPCacheEntry
type IPCacheEntry struct {

	// Key of the entry in the form of a CIDR range
	// Required: true
	Cidr *string `json:"cidr"`

	// The context ID for the encryption session
	EncryptKey int64 `json:"encryptKey,omitempty"`

	// IP address of the host
	HostIP string `json:"hostIP,omitempty"`

	// Numerical identity assigned to the IP
	// Required: true
	Identity *int64 `json:"identity"`

	// k8s metadata
	K8sMetadata *IPCacheEntryK8sMetadata `json:"k8sMetadata,omitempty"`
}

// Validate validates this IP cache entry
func (m *IPCacheEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK8sMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPCacheEntry) validateCidr(formats strfmt.Registry) error {

	if err := validate.Required("cidr", "body", m.Cidr); err != nil {
		return err
	}

	return nil
}

func (m *IPCacheEntry) validateIdentity(formats strfmt.Registry) error {

	if err := validate.Required("identity", "body", m.Identity); err != nil {
		return err
	}

	return nil
}

func (m *IPCacheEntry) validateK8sMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.K8sMetadata) { // not required
		return nil
	}

	if m.K8sMetadata != nil {
		if err := m.K8sMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPCacheEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPCacheEntry) UnmarshalBinary(b []byte) error {
	var res IPCacheEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
